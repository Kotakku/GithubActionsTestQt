name: Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 5.15.2
  PROJECT_FILE_NAME: GithubActionsTestQt
  DESCTOP_FILE: ${{ github.workspace }}/resources/GithubActionsTestQt.desktop
  ICON_FILE: ${{ github.workspace }}/resources/GithubActionsTestQt.png

jobs:
  env-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Check1
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Check2
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Previous tag: $TAG"

      - name: Check files
        run: |
          if [ ! -f ${{ env.SOURCE_DIR }}/${{ env.PROJECT_FILE_NAME }}.pro ]; then
            echo "Project file not found"
            exit 1
          fi
          if [ ! -f ${{ env.DESCTOP_FILE }} ]; then
            echo "Desktop file not found"
            exit 1
          fi
          if [ ! -f ${{ env.ICON_FILE }} ]; then
            echo "Icon file not found"
            exit 1
          fi

          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Previous tag: $TAG"
          
          # Check if the tag follows the vX.X.X format
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Increment the version (e.g., v1.0.0 -> v1.0.1)
            NEW_TAG=$(echo $TAG | awk -F. '{print $1"."$2"."$3+1}')
          else
            # Default to v1.0.0 if the existing tag does not follow the vX.X.X format
            NEW_TAG="v1.0.0"
          fi
          
          echo "New tag: $NEW_TAG"

  build-ubuntu:
    needs: [env-check]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          dir: ${{ runner.temp }}
          cache: true

      - name: Install linuxdeploy and Qt plugin
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
          cp linuxdeploy-x86_64.AppImage /usr/local/bin
          cp linuxdeploy-plugin-qt-x86_64.AppImage /usr/local/bin
          sudo apt install -y fuse libfuse2

      - name: Create build directory
        run: mkdir ${{ runner.temp }}/build

      - name: Build
        working-directory: ${{ runner.temp }}/build
        run: |
          qmake -r ${{ env.SOURCE_DIR }}/${{ env.PROJECT_FILE_NAME }}.pro
          make -j$(nproc)

      - name: Create AppImage
        working-directory: ${{ runner.temp }}/build
        run: |
          linuxdeploy-x86_64.AppImage --appdir AppDir -e ${{ env.PROJECT_FILE_NAME }} -i ${{ env.ICON_FILE }} -d ${{ env.DESCTOP_FILE }} --output appimage
          linuxdeploy-plugin-qt-x86_64.AppImage --appdir AppDir
          linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage

      - name: Save build artifact
        uses: actions/upload-artifact@master
        with:
          name: application-ubuntu
          path: ${{ runner.temp }}/build/${{ env.PROJECT_FILE_NAME }}-x86_64.AppImage

  build-windows:
    needs: [env-check]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          dir: ${{ runner.temp }}
          cache: true

      - name: Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
              7z x jom.zip -ojom
              
      - name: Create build directory
        run:  mkdir ${{ runner.temp }}\build

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build
        working-directory: ${{ runner.temp }}\build
        run:  |
              qmake -r ${{ env.SOURCE_DIR }}\${{ env.PROJECT_FILE_NAME }}.pro
              ${{ runner.temp }}\jom\jom -j2
              cd release
              windeployqt --qmldir ${{ env.SOURCE_DIR }} ${{ env.PROJECT_FILE_NAME }}.exe --pdb --release --compiler-runtime
              # copy C:\Windows\System32\concrt140.dll . 
              # copy C:\Windows\System32\vccorlib140.dll .
              # copy C:\Windows\System32\msvcp140.dll .
              # copy C:\Windows\System32\vcruntime140.dll .
              
      - name: Zip build
        working-directory: ${{ runner.temp }}
        run:  |
              7z a ${{ env.PROJECT_FILE_NAME }}-Win-X86_64.zip ${{ runner.temp }}\build\release\* -r

      - name: Save build artifact
        uses: actions/upload-artifact@master
        with:
          name: application-windows
          path: ${{ runner.temp }}\${{ env.PROJECT_FILE_NAME }}-Win-X86_64.zip

  release:
    needs: [build-ubuntu, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@master

      - name: Determine new version
        id: version
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Previous tag: $TAG"
          
          # Check if the tag follows the vX.X.X format
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Increment the version (e.g., v1.0.0 -> v1.0.1)
            NEW_TAG=$(echo $TAG | awk -F. '{print $1"."$2"."$3+1}')
          else
            # Default to v1.0.0 if the existing tag does not follow the vX.X.X format
            NEW_TAG="v1.0.0"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "tag=$NEW_TAG" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu File to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: application-ubuntu/${{ env.PROJECT_FILE_NAME }}-x86_64.AppImage
          asset_name: ${{ env.PROJECT_FILE_NAME }}-Ubuntu-x86_64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Windows File to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: application-windows/${{ env.PROJECT_FILE_NAME }}-Win-X86_64.zip
          asset_name: ${{ env.PROJECT_FILE_NAME }}-Win-X86_64.zip
          asset_content_type: application/vnd.ms-windows